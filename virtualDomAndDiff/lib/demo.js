!function(e){var s={};function t(r){if(s[r])return s[r].exports;var i=s[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=s,t.d=function(e,s,r){t.o(e,s)||Object.defineProperty(e,s,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,s){if(1&s&&(e=t(e)),8&s)return e;if(4&s&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&s&&"string"!=typeof e)for(var i in e)t.d(r,i,function(s){return e[s]}.bind(null,i));return r},t.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(s,"a",s),s},t.o=function(e,s){return Object.prototype.hasOwnProperty.call(e,s)},t.p="",t(t.s=1)}([function(e,s){const t={INSERT:Symbol("insert_node"),DELETE:Symbol("delete_node"),PROPS:Symbol("props_change"),TEXT:Symbol("text_change"),REORDER:Symbol("reorder")};e.exports={TYPE_MAP:t}},function(e,s,t){const{oldTreeMock:r,newTreeMock:i}=t(2),a=t(3),{diff:o}=t(4),{patch:n}=t(5),p=e=>{let s=[];return Array.isArray(e.children)&&e.children.length>0&&e.children.forEach((e,t)=>{"string"==typeof e?s.push(e):"object"==typeof e&&s.push(p(e))}),new a(e.tagName,e.props,s)};let l=p(r),d=p(i);const c=o(l,d);n(document.getElementById("app"),c),l=d},function(e,s){e.exports={newTreeMock:{tagName:"ul",props:{className:"user-list"},children:[{tagName:"li",children:["user2",{tagName:"p",props:{key:"p1"}}],props:{key:"user-item2",className:"user-item"}},{tagName:"li",children:["user1"],props:{key:"user-item1",className:"user-item"}},{tagName:"li",children:["user6"],props:{key:"user-item6",className:"user-item"}},{tagName:"li",children:["user4",{tagName:"ul",props:{className:"user-list"},children:[{tagName:"li",children:["user2",{tagName:"span",props:{key:"span1"}}],props:{key:"user-item2",className:"user-item"}},{tagName:"li",children:["user1"],props:{key:"user-item1",className:"user-item"}},{tagName:"li",children:["user5"],props:{key:"user-item5",className:"user-item"}},{tagName:"li",children:["user4"],props:{key:"user-item4",className:"user-item"}},{tagName:"li",children:["user3"],props:{key:"user-item3",className:"user-item"}}]}],props:{key:"user-item4",className:"user-item"}},{tagName:"li",children:["user3"],props:{key:"user-item3",className:"user-item"}}]},oldTreeMock:{tagName:"ul",props:{className:"user-list"},children:[{tagName:"li",children:["user1"],props:{key:"user-item1",className:"user-item"}},{tagName:"li",children:["user2",{tagName:"span",props:{key:"span1"}}],props:{key:"user-item2",className:"user-item"}},{tagName:"li",children:["user3"],props:{key:"user-item3",className:"user-item"}},{tagName:"li",children:["user5",{tagName:"span",props:{key:"span1"}}],props:{key:"user-item5",className:"user-item"}},{tagName:"li",children:["user4",{tagName:"ul",props:{className:"user-list"},children:[{tagName:"li",children:["user1"],props:{key:"user-item1",className:"user-item"}},{tagName:"li",children:["user2",{tagName:"span",props:{key:"span1"}}],props:{key:"user-item2",className:"user-item"}},{tagName:"li",children:["user3"],props:{key:"user-item3",className:"user-item"}},{tagName:"li",children:["user4"],props:{key:"user-item4",className:"user-item"}}]}],props:{key:"user-item4",className:"user-item"}}]}}},function(e,s){class t{constructor(e,s,t){this.tagName=e,this.props=s||{},this.children=t}render(){let e=document.createElement(this.tagName);if(this.props&&"object"==typeof this.props)for(const s in this.props)e.setAttribute(s,this.props[s]);return this.children.forEach((s,r)=>{let i=null;i=s instanceof t?s.render():document.createTextNode(s),e.appendChild(i)}),e}}e.exports=t},function(e,s,t){const{TYPE_MAP:r}=t(0),{INSERT:i,DELETE:a,PROPS:o,TEXT:n,REORDER:p}=r;class l{constructor(e,s){this.nodeIndex=0,this.patches={},this.propPatchs=[],this.oldTree=e,this.newTree=s}diff(){return this.dfs(this.oldTree,this.newTree),this.patches}dfs(e,s){if(this.patches[this.nodeIndex]=[],this.tagNameDiff(e,s)){let t=this.propsDiff(e,s,[]);0===t.length?this.childrenDiff(e.children,s.children):this.addPropsPatch(t)}else this.addReplacePatch(s)}childrenDiff(e,s){let t=[],r=this.nodeIndex;s.forEach((s,r)=>{let a=0;this.nodeIndex++,this.patches[this.nodeIndex]=[];let o=this.hasNode(e,s);if(void 0===o)t.push({type:i,node:s});else{if("string"==typeof s)return;this.dfs(e[o],s),r<=o||t.push({type:p,from:o,to:r})}a=Math.max(r,a)}),e.forEach((e,r)=>{void 0===this.hasNode(s,e)&&t.push({type:a,delPos:r})}),this.patches[r].push(...t)}hasNode(e,s){let t=void 0;for(let r=0,i=e.length;r<i;r++){let i=e[r];if("string"==typeof s||"string"==typeof i){if(s===i){t=r;break}}else if(i.props.key===s.props.key&&void 0!==i.props.key){t=r;break}}return t}tagNameDiff(e,s){return e.tagName===s.tagName}propsDiff(e,s,t){for(let r in e.props){let i=e.props[r];s.props[r]!==i&&t.push({key:s.props[r]})}for(let r in s.props)void 0===e.props[r]&&t.push({key:s.props[r]});return t}addPropsPatch(e){this.patches[this.nodeIndex].push({type:o,propsPatch:e})}addReplacePatch(e){const s={type:a},t={type:i,node:e};this.patches[this.nodeIndex].push(s),this.patches[this.nodeIndex].push(t)}}e.exports={diff:(e,s)=>{return new l(e,s).diff()}}},function(e,s,t){const{TYPE_MAP:r}=t(0),{INSERT:i,DELETE:a,PROPS:o,TEXT:n,REORDER:p}=r;class l{constructor(e,s){this.node=e,this.patches=s,this.nodeIndex=0}dfs(e){var s=e.childNodes?e.childNodes.length:0;let t=this.patches[this.nodeIndex];t&&t.length>0&&this.updatePatchs(e,t);for(let t=0;t<s;t++)this.nodeIndex++,this.dfs(e.childNodes[t])}updatePatchs(e,s){s.forEach((e,s)=>{const{type:t,node:r,from:n,to:l,delPos:d}=e;switch(!0){case t===i:this.insertNode(r,e);break;case t===a:this.delelteNode(r,e);break;case t===o:break;case t===p:this.reorderNode(r,e)}})}insertNode(e,{type:s,node:t}){e.appendChild(t)}delelteNode(e,{delPos:s}){e.removeChild(e.childNodes[s])}reorderNode(e,{from:s,to:t}){let r=e.childNodes,i=e.childNodes[s];t+1>=r?e.appendChild(i):e.insertBefore(e.childNodes[t+1],i),e.removeChild(i)}update(){this.dfs(this.node)}}e.exports={patch:(e,s)=>{new l(e,s).update()}}}]);